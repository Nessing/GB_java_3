Расширенный интерфейс ExecutorService наследованный от интерфейса Executor и имеет больше возможностей, так как в
интерфейсе Executor имеется только один метод execute(Runnable command), позволяющий выполнить какой-нибудь поток.
ExecutorServices это пул потоков, который позволяет создавать определенное количество потоков, которые переиспользуются
для решения задач в течении всего приложения, минуя создание новых потоков. Тем самым стабилизирует работу всего
приложения.
К примеру для выполнения задачи необходимо 1000 потоков. Благодаря методу newFixedThreadPool(int nThreads)
класса Executors, мы можем указать количество потоков 10 и при выполнении задачи будут использоваться только 10 потоков
(переиспользуются потоки) [ExecutorService executor = Executors.newFixedThreadPool(10);].
Часто используемые методы:
1) newSingleThreadExecutor() - создается только один поток;
2) newFixedThreadPool(int nThreads) - создает фиксированное количество потоков;
3) newCachedThreadPool() - создает неограниченное количество потоков. Данный метод интересен тем, что если созданный
поток под задачу не используется в течении 60 секунд, тогда он "умирает". Если же приходит новая задача,
то в течении 60 секунд свободный поток переиспользуется. Если же нет свободных потоков, то создается новый.

Использование newFixedThreadPool(int nThreads) в чате можно ограничивать количество подключенных клиентов.
Создаются 10 потоков. На сервер подключились 8 клиентов. 8 потоков задействованы, 2 из них свободны. При подключении
еще 2-х клиентов, оставшиеся 2 потока входят в работу с новыми клиентами. В случае если новый клиент попытается
подключиться на сервер, то поток для него не будет создаваться, так как все потоки заняты. Если же один клиент
покинет чат, то один поток освободиться, к которому сможет подключиться новый клиент и этот поток будет переиспользован
новым клиентом.

Использования newCachedThreadPool() на примере чата:
На сервер подсоединяются 10 клиентов, создались 10 потоков. Все 10 потоков работают стабильно.
В случае если один отключился, то один поток остается свободным и начинается отчет 60 секунд.
Если никто не подключился, тогда неиспользуемый поток удаляется и в работе остаются 9 потоков.
Если же в течении 60 секунд подключается новый клиент, тогда свободный поток переиспользуется под нового клиента и
количество остается так же 10.

В заключении: для текущего чата, при использовании ExecutorService на серверной сторое, по моему мнению, наиболее
целесообразно использовать метод newCachedThreadPool(), так как он наиболее подходит для любого количества
подключенных клиентов.